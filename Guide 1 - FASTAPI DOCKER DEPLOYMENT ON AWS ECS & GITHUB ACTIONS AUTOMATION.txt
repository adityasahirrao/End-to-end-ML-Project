-------------------------------------------------------------------------------------------------------
‚úÖ FASTAPI DOCKER CONTAINER DEPLOYMENT ON AWS ECS (Public URL Access)
-------------------------------------------------------------------------------------------------------

 - Follow youtube video : https://youtu.be/pJ_nCklQ65w?si=sCaP6ctzbbGtdFgb

1Ô∏è. Create ECR Repository
--------------------------------
- Go to AWS Console > ECR > Create Repository
- Name: house-price-prediction-ecr-repo (or your project name)
- Leave settings as default
- Click "Create Repository"

2Ô∏è. Push Docker Image to ECR
--------------------------------
- Click on the created repo > View "Push Commands"
- Run the below in VS Code terminal:

# Authenticate Docker to your ECR
aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin <aws_account_id>.dkr.ecr.us-east-1.amazonaws.com

# Build Docker Image
docker build -t house-price-prediction-ecr-repo .

# Tag the Image
docker tag house-price-prediction-ecr-repo:latest <aws_account_id>.dkr.ecr.us-east-1.amazonaws.com/house-price-prediction-ecr-repo:latest

# Push to ECR
docker push <aws_account_id>.dkr.ecr.us-east-1.amazonaws.com/house-price-prediction-ecr-repo:latest

3Ô∏è. Create ECS Cluster
--------------------------------
- Go to AWS Console > ECS > Clusters > Create Cluster
- Choose: "Networking only (Fargate)"
- Name: house-price-prediction-cluster
- VPC: Leave default or create custom
- Click "Create"

4Ô∏è. Create Task Definition
--------------------------------
- Go to ECS > Task Definitions > Create new
- Launch Type: FARGATE
- Task Name: house-price-prediction-task
- Task Role: ecsTaskExecutionRole
- Container:
  - Name: house-price-prediction-container
  - Image: <ECR Image URL from step 2>
  - Port Mappings: Container Port = 80
- Memory: 2 GB, CPU: 1 vCPU
- Click "Create"

5Ô∏è. Create ECS Service
--------------------------------
- Go to ECS > Clusters > Your Cluster > Services tab > Create
- Launch Type: FARGATE
- Task Definition: Select from dropdown
- Service Name: house-price-prediction-service
- Number of tasks: 1
- Cluster VPC: Select default or existing
- Security Group: Create new or select existing
  - Ensure Port 80 is allowed from 0.0.0.0/0 (for public access)
- Load Balancer: Optional (add ALB if HTTPS needed)
- Click "Create Service"

6Ô∏è. Access Public URL
--------------------------------
- Go to ECS > Clusters > Your Cluster > Tasks
- Select running Task > Click ENI (Elastic Network Interface) > IPv4 Public IP
- Open http://<public-ip>/ in browser or Postman

üìå Optional (HTTPS Setup)
--------------------------------
- Set up Route53 with your domain
- Create ACM SSL Certificate for your domain (must be public)
- Attach domain + HTTPS cert to ALB, and point ALB to ECS service

üìå Optional (Auto-scaling)
--------------------------------
- Go to ECS Service > Auto Scaling
- Add rules for CPU/Memory-based scaling

üìå Optional (API Gateway)
--------------------------------
- Use API Gateway to expose ECS service with:
  - Rate limiting
  - Auth
  - HTTPS support without ALB

-------------------------------------------------------------------------------------------------------
‚úÖ Automate ECS Deployment with GitHub Actions
-------------------------------------------------------------------------------------------------------

7Ô∏è. Automate ECS Deployment with GitHub Actions
------------------------------------------------

üîπ Folder Structure (in root of your project):

- ecs/
  ‚îî‚îÄ‚îÄ taskdef.json
- .github/
  ‚îî‚îÄ‚îÄ workflows/
      ‚îî‚îÄ‚îÄ deploy.yml


8Ô∏è. Add `taskdef.json` File
------------------------------------------------

9Ô∏è. Add deploy.yml File
------------------------------------------------

10. Add GitHub Repository Secrets
------------------------------------------------
Go to your GitHub repo ‚Üí Settings ‚Üí Secrets ‚Üí Actions ‚Üí Add the following:

 - AWS_ACCESS_KEY_ID = Your IAM user's access key
 - AWS_SECRET_ACCESS_KEY = Your IAM user's secret key
 - AWS_REGION = us-east-1
 - ECR_REPOSITORY = house-price-prediction-ecr-repo   (This is with respect to my project setup)
 - IMAGE_TAG = latest (or main or version tag)
 - CLUSTER_NAME = house-price-prediction-cluster      (This is with respect to my project setup)
 - SERVICE_NAME = house-price-prediction-service      (This is with respect to my project setup)

‚úÖ Optional:

TASK_DEFINITION_FAMILY = house-price-prediction-ecs-task-def (if needed for manual ARN fetch)

üîê 11. Security Group - Inbound Rules
------------------------------------------------
‚úÖ Allow Port 80 (HTTP) for public access:

 - Type: HTTP
 - Port: 80
 - Source: 0.0.0.0/0

‚úÖ To support HTTPS (SSL) in future:

 - Type: HTTPS
 - Port: 443
 - Source: 0.0.0.0/0

‚öôÔ∏è Extra Tips:
------------------------------------------------
 - Use ACM + Route 53 + Application Load Balancer for HTTPS with your domain.
 - Add health check path in ECS service (e.g., /health) if needed.
 - Use .env file locally to manage Docker ENV vars and use ENV inside Dockerfile.

üéØ Final Step:
------------------------------------------------
 - Commit and push changes to the main branch on GitHub.
 - GitHub Actions will auto-trigger, build Docker image, push to ECR, and update ECS service.

 - Visit your Task ‚Üí ENI ‚Üí Public IP in browser:
http://<public-ip> ‚úÖ

